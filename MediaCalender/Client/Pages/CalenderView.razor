@page "/Calender"
@using MediaCalender.Shared.Containers
@using MediaCalender.Shared.ContentTypes
@using System.ComponentModel
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Schedule
@using Syncfusion.EJ2.Blazor.SplitButtons
@inject HttpClient Http

<h1>Media Calender!</h1>

@if (loaded == false)
{
    <p><em>Loading...</em></p>
}
else if (loginStatus == false)
{
    <p><em>Not logged in!</em></p>
}
else
{
    @*Movie string to test connection, *@
    @*<p>@movieString.str</p>*@

    <div>
        Movie name: <input type="text" style="margin-left:4px" id="movieName" name="movieName" @bind="movieName" /><br>
    </div>

    <button class="btn btn-primary" @onclick="AddMovie">Add movie</button>
    @*<button class="btn btn-primary" @onclick="GetAllEpisodes">Add movie</button>*@
    <p>@((MarkupString)addMovieResultString)</p>

    <div>
        Series name: <input type="text" style="margin-left:2px" id="seriesName" name="seriesName" @bind="seriesName" /><br>
    </div>

    <button class="btn btn-primary" @onclick="AddSeries">Add series</button>
    <p>@((MarkupString)addSeriesResultString)</p>
    @*<p style="white-space: pre-line">@addMovieResultString</p>*@

    <p>Number: @EpNum</p>
    <button class="btn btn-primary" @onclick="UpdateSchedule">Update Calendar</button>
    <button class="btn btn-primary" @onclick="ClearDatabase">Clear database</button>
    <p>@((MarkupString)clearDatabaseResultString)</p>

    <EjsSchedule @ref="ScheduleObj"
                 TValue="AppointmentData"
                 Height=700px
                 Width="auto"
                 CurrentView="View.Month"
                 FirstDayOfWeek=1
                 RowAutoHeight="true">
        <ScheduleEventSettings DataSource="@DataSource"></ScheduleEventSettings>
    </EjsSchedule>

    <EjsProgressButton EnableProgress="true" Content="Progress Step" CssClass="e-hide-spinner">
        <ProgressButtonEvents OnBegin="@begin"></ProgressButtonEvents>
    </EjsProgressButton>


}

@code {
    List<AppointmentData> DataSource = new List<AppointmentData>();
    StringContainer movieString;
    EjsSchedule<AppointmentData> ScheduleObj;
    string movieName, seriesName, addMovieResultString, addSeriesResultString, EpNum, clearDatabaseResultString;
    bool loaded = false, loginStatus;
    #region Calendar things
    // Needed because of bug in Blazor https://github.com/Joelius300/ChartJSBlazor/issues/93
    private ReferenceConverter ReferenceConverter = new ReferenceConverter(typeof(EjsSchedule<object>));
    // Idk
    private void begin(Syncfusion.EJ2.Blazor.SplitButtons.ProgressEventArgs args)
    {
        args.Step = 2;
    }
    #endregion Calendar things

    protected override async Task OnInitializedAsync()
    {
        loginStatus = await CheckLoginStatus();
        await GetAllEpisodes();
    }

    private async Task<bool> CheckLoginStatus()
    {
        BoolContainer loginStatus;
        loginStatus = await Http.GetJsonAsync<BoolContainer>("Login/CheckLoginStatus");
        return loginStatus.result;
    }

    public async Task AddMovie()
    {
        // Sends movie name to be added and retrieves bool about succesfulness
        StringContainer stringContainer = new StringContainer() { str = movieName };
        ResultContainer answer = await Http.PostJsonAsync<ResultContainer>("Calendar/AddMovie", stringContainer);

        // Process depending on result
        if (answer.result)
        {
            addMovieResultString = $"{movieName} added to followed media";
        }
        else
            addMovieResultString = $"{movieName} could not be added <br />{answer.errorMessage}";
    }

    public async Task AddSeries()
    {
        // Sends movie name to be added and retrieves bool about succesfulness
        StringContainer stringContainer = new StringContainer() { str = seriesName };
        Task<ResultContainer> taskAnswer = Http.PostJsonAsync<ResultContainer>("Calendar/AddFolSeries", stringContainer);

        addSeriesResultString = "Adding series in progress";

        ResultContainer answer = await taskAnswer;

        // Process depending on result
        if (answer.result)
        {
            addSeriesResultString = $"{seriesName} added to followed media";
        }
        else
            addSeriesResultString = $"{seriesName} could not be added <br />{answer.errorMessage}";
    }

    public async Task GetAllEpisodes()
    {
        List<Episode> episodeList = await Http.PostJsonAsync<List<Episode>>("Calendar/GetAllEpisodes", new DateTime());

        // Process depending on result
        foreach (Episode episode in episodeList.Reverse<Episode>())
        {
            AppointmentData epField = new AppointmentData();
            epField.Id = 1;
            if (episode.airedSeason == 0)
                epField.Subject = episode.SeriesName + $" [Special {episode.airedEpisodeNumber}]";
            else
                epField.Subject = episode.SeriesName + $" [S{episode.airedSeason}E{episode.airedEpisodeNumber}]";
            epField.StartTime = episode.firstAired;
            epField.EndTime = epField.StartTime;
            epField.Color = "#357cd2";

            DataSource.Add(epField);
        }
        EpNum = episodeList.Count().ToString();
        loaded = true;
    }

    private DateTime ConvertStrDateToDateTime(string dateString)
    {
        DateTime date = new DateTime();

        date = DateTime.Parse(dateString);

        return date;
    }

    private async Task ClearDatabase()
    {
        StringContainer stringContainer = new StringContainer() { str = movieName };
        ResultContainer answer = await Http.PostJsonAsync<ResultContainer>("Calendar/ClearDatabase", stringContainer);

        if (answer.result)
            clearDatabaseResultString = $"Database have been cleared";
        else
            clearDatabaseResultString = $"Database could not be cleared <br />{answer.errorMessage}";
    }
    private async Task UpdateSchedule()
    {
        Task task = GetAllEpisodes();
        DataSource.Clear();
        await task;
        ScheduleObj.Refresh();
    }
}